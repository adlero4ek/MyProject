datasets:

  Appication.dataset.ListOfInformationSystems:
    source: >
      (

        $Datalake := $;
        $ComponentCardSystem  := Constants.ComponentCard.System;
        $ComponentCardDefault := Constants.ComponentCard.Default;
  
        $distinct(components.$spread().(
      
          $component_id := $keys()[0];
          
          /*Организация-владелец*/
          $organization_id := $split($component_id, ".", 1) ~> $join('.');
      
          /* Функцональный контура приложений/сервисов */
          $functional_area_id := $split($component_id, ".", 3) ~> $join('.');
      
          *.{
            "id":                      $ComponentCardDefault & $component_id,
            "extended_component_card": $ComponentCardSystem & $component_id,
            "title":                   title,
            "entity":                  entity,
            "description":             description,
            "type":                    extension.type,
            "area":                    $functional_area_id ? $lookup($manifest.components, $functional_area_id).title : $functional_area_id,
            "area_id":                 $functional_area_id ? $ComponentCardDefault & $functional_area_id: "",
            "state":                   extension.state,
            "state_update_date":       extension.state_update_date,
            "development_platform":    extension.development_platform,
            "basic_solution":          extension.basic_solution,
            "basic_solution_link":     extension.basic_solution_link,
            "basic_solution_state":    extension.basic_solution_state,
            "basic_solution_summary":  (extension.basic_solution & ", статус: " & extension.basic_solution_state),
            "provider":                extension.provider,
            "provider_type":           extension.provider_type,
            "organization_title":      $organization_id ? $lookup($Datalake.components, $organization_id).title : $organization_id,
            "organization_link":       $organization_id ? $ComponentCardDefault & $organization_id: ""
          };
      
        ))[type="system" or type="external system"]^(organization_title)
      
      )

      
      

  # Опциональная документация по системе или её компонентам, документация не выводится в меню, он прикрепляется к карточке системы
  Application.dataset.ApplicationDocs:
    source: >
      (
          $system_id := $params.component;

          docs.$spread().(

            $DocID := $keys()[0];
            $DocIsDesignedForSystem := $system_id in *.subjects;

            {

              "Doc_ID": $DocID,
              "Doc_Link": "/docs/" & $DocID,
              "Doc_Description": *.description,
              "Doc_Category": *.category

            }[$DocIsDesignedForSystem and Doc_Category="Документация по системе или её компонентам"]

          )

      )




  # Используемые технологии при разработке приложения
  Application.dataset.Technologies:
    source: >
      (
          $manifest    := $;
          $system_id   := $params.component;
          $system_tech := $lookup($.components, $system_id).technologies;
  
          $system_tech.(
  
            $technology := $lookup($manifest.technologies.items, $);
  
            {
              "technology_ID": $,
              "technology_title": $technology ? $technology.title : "",
              "technology_link": $technology ? $technology.link : "",
              "technology_section": $technology? $technology.section : "",
              "technology_status": $technology ? $technology.status : "Не определён",
              "technology_aliases": $technology ? $join($technology.aliases, ", ") : ""
            }
  
          );
      )



  # Ключевые сотрудники, контакты
  Application.dataset.KeyContacts:
    source: >
      (
      
        $system_id := $params.component;          
      
        $manifest := $;        
        $dictionaries := $manifest.dictionaries;
        $functions := $manifest.functions;
        $accounts := $dictionaries."accounts".parameters;
        $systems := $manifest.components;
      
        $sys_pattern := $eval("/^" &  $system_id & "$/");
        $system := $systems.$sift(function($v, $k) {$k ~> $sys_pattern});
      
        $contacts := $dictionaries."settings.contacts".parameters.(
          $name := name;
          $contact_account_names := $spread($system.*).$sift(function ($v, $k) { $k = $name }).*;
          {
            "title": title,
            "scrum_title": scrum_title,
            "is_optional": is_optional,
            "order_index": order_index,
            "description": description,
            "account_names": [$contact_account_names]
          };
        )[$not(is_optional) or $count(account_names) > 0];
      
        $sort($contacts, function ($l, $r) { $l.order_index > $r.order_index }).(
          $contact_settings := $;
          account_names.(
            $account := $eval($functions.get_account,{"username": $, "accounts": $accounts});
            {
              "title": $contact_settings.title,
              "scrum": $contact_settings.scrum_title,
              "res_persons": $account.title,
              "acc_persons": $account.name,
              "acc_link": $account.acc_link,
              "acc_email": $account.email,
              "acc_description": $contact_settings.description
            } 
          )
        );
      
      )


  # Функциональность приложений и сервисов
  Application.dataset.Aspects:
    source: >   
      (  

        $DataLake  := $;     
        $system_id   := $params.component;
        
        $distinct($DataLake.components.$spread().(
    
          $component_id := $keys()[0];
      
            *.aspects.(
        
                $aspect_id := $;
        
                {
                  "component_id": $component_id,
                  "aspect_id":  $aspect_id,
                  "aspect_title": $lookup($DataLake.aspects, $aspect_id).title,
                  "aspect_link": "/architect/aspects/" & $aspect_id
                }
            )[component_id=$system_id]
          )
        )^(aspect_title)   
      )   

