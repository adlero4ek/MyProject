datasets:

  links.dataset.MainListOfLinks:
    source: >
      (
      
          $Datalake   := $;      
          $Components := $Datalake.components;
          
          $.links.$spread().(
          
            $Link   := *.$;
            $LinkId := $keys()[0];
      
            $SystemAndSubSystem_From := $eval($Datalake.functions.get_system_and_subsystem_by_id,{"Id": $Link.from, "Datalake": $Datalake});
            $SystemAndSubSystem_To   := $eval($Datalake.functions.get_system_and_subsystem_by_id,{"Id": $Link.to, "Datalake": $Datalake});
            
            {
              "link_id": $LinkId,
              "link_link": "/entities/links/blank?id=" & $LinkId,
              "link_code": $Link.code,
              "link_title": $Link.title,
              "link_description": $Link.description,
              "link_state": $Link.state,
              "link_state_update_date": $Link.state_update_date,
              "link_asynchronous": $Link.asynchronous,
              "link_size_mb": $Link.size_mb,
              "link_periodicity": $Link.periodicity,
      
              "isIntegrationDataFlow": $Link.type = "Интеграционный поток данных",
      
              "component_from_id": $SystemAndSubSystem_From.System_Id,
              "component_from_link": $SystemAndSubSystem_From.System_link,
              "component_from_title": $SystemAndSubSystem_From.System_title,
      
              "component_from_sybsystem_id": $SystemAndSubSystem_From.SubSystem_Id,
              "component_from_sybsystem_link": $SystemAndSubSystem_From.SubSystem_title != "" ? $SystemAndSubSystem_From.SubSystem_link : "" ,
              "component_from_sybsystem_title": $SystemAndSubSystem_From.SubSystem_title != "" ? $SystemAndSubSystem_From.SubSystem_title : "undefined",
      
              "component_to_id": $SystemAndSubSystem_To.System_Id,
              "component_to_link": $SystemAndSubSystem_To.System_link,
              "component_to_title": $SystemAndSubSystem_To.System_title != "" ? $SystemAndSubSystem_To.System_title : "undefined",
      
              "component_to_sybsystem_id": $SystemAndSubSystem_To.SubSystem_Id,
              "component_to_sybsystem_link": $SystemAndSubSystem_To.SubSystem_title != "" ? $SystemAndSubSystem_To.SubSystem_link : "" ,
              "component_to_sybsystem_title": $SystemAndSubSystem_To.SubSystem_title != "" ? $SystemAndSubSystem_To.SubSystem_title : "undefined",
              
              "interface": $Link.interface,
              "interface_standard_type": $Link.interface_standard_type,
              "interface_via": $Link.interface_via,
              "interface_via_title": $lookup($Components, $Link.interface_via).title,
              "interface_via_link": $contains($Link.interface_via, "Systems") ? "/architect/components/" & $Link.interface_via : "undefined"      
            }
      
          )[isIntegrationDataFlow=true]^(link_code)
      
      )

  links.dataset.ParametersList:
    source: >
      (

        links.$spread().(
      
          $Link_id :=  $keys()[0];
      
          *.parameters.{
            "id": $Link_id,
            "name": name,
            "description": description,
            "type": type
           }
        
        )[id=$params.id]
      
      )
  links.dataset.BusinessObjects:
    source: >
      (

        $Datalake := $;
  
        links.$spread().(
        
          $Link_id :=  $keys()[0];
         
          *.BusinessObjects.(
          
            $Object  := $;
            $Objects := $lookup($Datalake.BusinessObjects, $Object);
            $Objects := $merge([$Objects, {"id": $Object}]);
      
            {
                "Link_id": $Link_id,
                "BusinessObject_id": $Objects.id,
                "BusinessObject_title": $Objects.title,
                "BusinessObject_description": $Objects.description,
                "BusinessObject_link": "/entities/BusinessObjects/blank?id=" & $Objects.id
              
            }
          )
          
        )[Link_id=$params.id]
      
      )